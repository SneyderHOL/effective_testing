Data types
- Boolean - True or False
- Character - char, varchar and text
- Numeric - integer and floating-point number
- Temporal - date, time, timestamp and interval

- UUID - universally unique identifiers
- ARRAY - stores an array of strings, numbers, etc.
- JSON
- Hstore Key-value pair
- SPecial types such as network address and geometric data.


Table properties
Primary keys
Foreign keys

Constraints
-Constraint are rules enforced on data columns on table.
-These are used to prevent invalid data from being entered into the database.
-This ensures the accuracy and reliability of the data in the database.

2 categories
-Column constraints:
 -constrains the data in a column to adhere to certain conditions.
-Table constraints:
 -applied to the entire table rather than to an individual column.

most commons:
column constraints:
NOT NULL
UNIQUE
PRIMARY KEY
FOREIGN KEY
CHECK - ensures that all values in a column satisfy certain conditions.
EXCLUSION - ensures that if any two rows are compared on the specified column or expression using the specified operator, not all of these comparison will return TRUE.

table constraints:
CHECK(condition) - check a condition when inserting or updating
REFERENCES - to constrain the value stored in the column that must exist in a column in another table
UNIQUE(column_list) - forces the values stored in the columns listed inside the parentheses to be unique.
PRIMARY KEY(column_list) - allows you to define the primary key that consist of multiple columns


CREATE
CREATE TABLE table_name(
  column_name TYPE column_constraint,
  column_name TYPE column_constraint,
  table_constraint table_constraint
) INHERITS existing_table_name;

common simple syntax

INSERT
INSERT INTO table(column1, column2,...) VALUES (value1, value2, ...), (value1, value2, ...);
INSERT INTO table(column1, column2,...) SELECT (column1, column2,...) FROM another_table WHERE condition;

UPDATE
UPDATE table SET column1 = value1, column2 = value2, ... WHERE condition;

update join
UPDATE tableA SET original_col = tableB.new_col FROM tableB WHERE tableA.id = tableB.id;

return affected rows
UPDATE table SET column1 = value
RETURNING column1, column2;

DELETE
DELETE FROM table WHERE row_id = 1;
DELETE FROM tableA USING tableB WHERE tableA.id = tableB.id;
DELETE FROM table;
DELETE FROM table WHERE row_id = 1 RETURNING col1, col2;

ALTER clause
Allows for changes to an existence table structure, such as:
-Adding, dropping or renaming columns
-Changing a column's data type
-Set DEFAULT values for a column
-Add CHECK cosntraint
-Rename table

General syntax
ALTER TABLE table_name action;
ALTER TABLE table_name ADD COLUMN new_col type;
ALTER TABLE table_name DROP COLUMN col_name;
ALTER TABLE table_name ALTER COLUMN col_name SET DEFAULT value;
ALTER TABLE table_name ALTER COLUMN col_name DROP DEFAULT;
ALTER TABLE table_name ALTER COLUMN col_name DROP NOT NULL;
ALTER TABLE table_name ALTER COLUMN col_name ADD CONSTRAINT constraint_name;
ALTER TABLE table_name RENAME TO new_table_name;
ALTER TABLE table_name RENAME COLUMN col_name TO new_col_name;

DROP keyword
-allows for the complete removal of a column in a table
-allows also automatically remove all of its indexes and constraints involving the column
-it will not remove columns used in views, triggers, or stored procedures without the additional CASCADE clause

ALTER TABLE table_name DROP COLUMN col_name;
ALTER TABLE table_name DROP COLUMN col_name CASCADE;
ALTER TABLE table_name DROP COLUMN IF EXISTS col_name;
ALTER TABLE table_name DROP COLUMN col1_name, DROP COLUMN col2_name;

CHECK
-allows us to create more customized constraint that adhere to a certain condition.
-such as making sure all inserted integer values fall below a certain threshold.
General syntax
-CREATE TABLE example(ex_id SERIAL PRIMARY KEY, age SMALLINT CHECK(age > 21), parent_age SMALLINT CHECK(parent_age > age));


KEYWORDS
CASE, COALESCE, NULLIF, CAST, Views, Import and Export Functionality

CASE
statement to only execute SQL code when certain conditions are met.
Very similar to IF/ELSE statements in other programming languages.

Usage: general CASE, or a CASE expression, both lead to the same result.
general syntax:
CASE
  WHEN condition1 THEN result1
  WHEN condition2 THEN result2
  ELSE some_other_result
END

example:
SELECT a,
CASE WHEN a = 1 THEN 'one'
     WHEN a = 2 THEN 'two'
ELSE 'other'
END AS alias
FROM test;

expression syntax:
first evaluates an expression then compares the result with each value in the WHEN clauses sequentially.
CASE expression
  WHEN value1 THEN result1
  WHEN value2 THEN result2
  ELSE some_other_result
END

example:
SELECT a,
CASE a
  WHEN 1 THEN 'one'
  WHEN 2 THEN 'two'
  ELSE 'other'
END
FROM test;


COALESCE
function that accepts an unlimited number of arguments. It returns the first argument that is not null. If all arguments are null, the COALESCE function will return null.
 - COALESCE(arg_1, arg_2, ..., arg_n)

example:
 -COALESCE(1,2)
 -1
 -COALESE(NULL, 2, 3)
 -2

the function become useful when querying a table that contains null values and substituting it with another value.
example:
Table of products
 - Price and discounts in Dollars
Item	     	       Price			Discount
A		       100			20
B		       300			NULL
C		       200			10
What is the final price?
SELECT item, (price - COALESCE(discount, 0)) AS final FROM products;


CAST
let's you convert from one data type into another.
it must be reasonable to convert the data. '5' to int will work, 'five' to int will not.

syntax for CAST function
SELECT CAST('5' AS INTEGER)

PostgreSQL CAST operator
SELECT '5'::INTEGER

example:
SELECT CAST(date AS TIMESTAMP) FROM table;


NULLIF
function that takes in 2 inputs and return NULL if both are equal, otherwise it returns the first argument passed.
example:
NULLIF(10,10)
-NULL
NULLIF(10,12)
-10

example:
# depts table, where 2 people lives in A and 0 lives in B
SELECT (
SUM(CASE WHEN department = 'A' THEN 1 ELSE 0 END) /
	NULLIF(
SUM(CASE WHEN department = 'B' THEN 1 ELSE 0 END), 0)
) AS department_ratio
FROM depts;


VIEWS

You can create a VIEW to quickly see the query that is a specific combination of tables and conditions that you use quite often.
Is a database object that is of a stored query, can be accessed as a virtual table in PostgreSQL, does not store data physically, it simply stores the query.

Ex:
CREATE VIEW view_name AS
SELECT column1, column2 FROM table1 JOIN table2 USING column3;

#update view
CREATE OR REPLACE VIEW view_name AS ... query...;
#delete view
DROP VIEW view_name;
DROP VIEW IF EXISTE view_name;
#rename view
ALTER VIEW view_name RENAME TO view_new_name;
#using it like a table
SELECT * FROM view_name;

IMPORT/EXPORT  - COPY
postgresql.org/docs/12/sql-copy.html

